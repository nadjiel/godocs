## [GodocsCLI] is the entry point for the Godocs plugin through the CLI.
## 
## The [GodocsCLI] can be used to automatize the process of parsing the
## [code]XML[/code] generated by Godot's [code]doctool[/code] through the CLI.
class_name GodocsCLI
extends MainLoop

## The [member godocs] property stores a reference to a [Godocs] instance, which
## is responsible for handling the parsing and converting of the documentation
## [code]XML[/code].
var godocs: Godocs

## The [member args] property stores the arguments passed to this program
## through the CLI, with the use of [code]key=value[/code] pairs
## (After Godot's [code]--[/code] separator).
var args: Dictionary[String, String] = {}

func parse_args(args: PackedStringArray) -> void:
	for arg: String in args:
		var key_value: PackedStringArray = arg.split("=", true, 1)
		var key: String = key_value[0]
		var value: String = key_value[1] if key_value.size() > 1 else ""
		
		self.args[key] = value

func validate_args() -> void:
	if not args.has("src"):
		exit('No source passed! Pass "src=path/to/xml"', ERR_UNCONFIGURED)
	if not args.has("build"):
		exit('No build passed! Pass "build=path/to/build"')

func _parse_constructor_type(input: String) -> Variant:
	match(input):
		"RST": return Godocs.ConstructorType.RST
	
	return input

func _initialize() -> void:
	parse_args(OS.get_cmdline_user_args())
	validate_args()
	
	godocs = Godocs.new(
		args.get("src"),
		args.get("build"),
		_parse_constructor_type(args.get("type", "RST")),
	)
	
	prints("Initialized with args:", args)
	
	#parse_folder("docs")
	#BetterXMLParser.parse_xml("docs/LokJSONAccessStrategy.xml")
	
	exit("Exited", OK)

func _finalize() -> void:
	print("Finalized")

func exit(message: String, code: Error = OK) -> void:
	if code != OK:
		print(message)
	else:
		print(message)
	
	_finalize()
	OS.kill(OS.get_process_id())
