## Creates a RST section with subsections describing the methods of a class.
## 
## The [RSTClassMethodDescriptionBuilder] is capable of creating a [String]
## with a [b]section in Restructured Text syntax[/b] listing and describing
## the methods of a class stored in a [ClassDocDB].[br]
## The format of the output generated by the
## [method RSTClassMethodDescriptionBuilder.build] method is as follows:
## [codeblock lang=rst]
## 
## Method descriptions
## ===================
## 
## 
## .. _godocs_Class_method_a:
## 
## :ref:`String <godocs_String>` method_a\(\)
## -------------------------------------------------
## 
## Description of the method_a.
## 
## 
## .. _godocs_Class_method_b:
## 
## :ref:`bool <godocs_bool>` method_b\(\)
## -----------------------------------------------
## 
## Description of the method_b.
## 
## 
## [/codeblock]
## [i]See also: [RSTDocBuilder] and [ClassDocDB].[/i]
class_name RSTClassMethodDescriptionBuilder
extends RSTDocBuilder

var _bbcode: SyntaxInterpreter = BBCodeSyntaxInterpreter.new()

var _rst: SyntaxTranslator = RSTSyntaxTranslator.new()

func build(db: ClassDocDB) -> String:
	var doc: XMLDocument = db.get_current_class_document()
	var class_node: XMLNode = doc.root
	
	var title := "Method descriptions"
	
	var title_output: String = RSTSyntaxTranslator.make_heading(title, 2)
	var descriptions_output: String = make_member_descriptions(
		"methods",
		_make_method_description,
		db,
	)
	
	if descriptions_output.is_empty():
		return ""
	
	var result: String = "\n%s\n%s" % [
		title_output,
		descriptions_output
	]
	
	return result

func _make_method_description(
	method_node: XMLNode,
	db: ClassDocDB
) -> String:
	var doc: XMLDocument = db.get_current_class_document()
	var doc_name: String = doc.root.attributes.get("name", "")
	var description_node: XMLNode = method_node.get_child_by_name("description")
	var return_node: XMLNode = method_node.get_child_by_name("return")
	var param_nodes: Array[XMLNode] = method_node.get_children_by_name("param")
	
	var description: String = description_node.content
	
	if description == "":
		return ""
	
	var return_type: String = return_node.attributes.get("type", "")
	var name: String = method_node.attributes.get("name", "")
	var is_static: bool = method_node.attributes.get("qualifiers", "")\
		.contains("static")
	var full_name: String = ".".join([ doc_name, name ])
	var param_list: Array[Dictionary] = []
	
	for param_node: XMLNode in param_nodes:
		param_list.append(param_node.attributes)
	
	var signature: String = make_method_signature(
		full_name,
		return_type,
		param_list,
		is_static,
		false,
	)
	
	var label_output: String = RSTSyntaxTranslator\
		.make_code_member_label(".".join([ doc_name, name ]))
	var signature_output: String = RSTSyntaxTranslator\
		.make_heading(signature, 3)
	var description_output: String = _bbcode\
		.interpret(description)\
		.translate(_rst)
	description_output = autocomplete_code_member_refs(description_output, db)
	
	var result: String = "\n%s\n\n%s\n%s\n\n" % [
		label_output,
		signature_output,
		description_output,
	]
	
	return result
