## [GodocsCLI] is the entry point for the Godocs plugin through the CLI.
## 
## The [GodocsCLI] can be used to automatize the process of parsing the
## [code]XML[/code] generated by Godot's [code]doctool[/code] through the CLI.
class_name GodocsCLI
extends SceneTree

## The [member _godocs] property stores a reference to a [Godocs] instance, which
## is responsible for handling the parsing and converting of the documentation
## [code]XML[/code].
var _godocs: Godocs

## The [member _args] property stores the arguments passed to this program
## through the CLI, with the use of [code]key=value[/code] pairs
## (After Godot's [code]--[/code] separator).
var _args: Dictionary[String, String] = {}

var _help: Dictionary[String, String] = {
	"help": "Optional parameter that can be used to get this help information.\nIf nothing is passed to GodocsCLI, this is used by default",
	"src": "This mandatory parameter should specify the path to the folder with the XML documentation to parse",
	"build": "This mandatory parameter should specify the path to the folder where the generated documentation should be stored",
	"type": "Optional parameter that specifies what type of output is desired.\nYou can either pass one of {constructors} or a path to a Script that inherits from the DocConstructor class".format({
		"constructors": Godocs.ConstructorType.keys()
	}),
}

func _initialize() -> void:
	_parse_args(OS.get_cmdline_user_args())
	
	var error: Error = OK
	
	error = _validate_args()
	
	if error != OK:
		return
	
	_godocs = Godocs.new(
		_args.get("src"),
		_args.get("build"),
		_parse_constructor_type(_args.get("type", "RST")),
	)
	
	error = _godocs.execute()
	
	_exit("Finished", error)

func _exit(message: String, code: Error = OK) -> void:
	var output: String = error_string(code) + ": " if code != OK else ""
	
	output += message
	
	print(output)
	
	quit(code)

func _parse_args(_args: PackedStringArray) -> void:
	for arg: String in _args:
		var key_value: PackedStringArray = arg.split("=", true, 1)
		var key: String = key_value[0]
		var value: String = key_value[1] if key_value.size() > 1 else ""
		
		self._args[key] = value

func _parse_constructor_type(input: String) -> Variant:
	if Godocs.ConstructorType.has(input):
		return Godocs.ConstructorType.get(input)
	
	return input

func _validate_args() -> Error:
	if _args.has("help") or _args.is_empty():
		_exit(_get_help())
		return OK
	
	if not _args.has("src"):
		_exit('Mandatory source path not provided! Make sure to specify a "src" argument like this "src=path/to/xml/"', ERR_UNCONFIGURED)
		return ERR_UNCONFIGURED
	if not _args.has("build"):
		_exit('Mandatory build path not provided! Make sure to specify a "build" argument like this "build=path/to/build/"', ERR_UNCONFIGURED)
		return ERR_UNCONFIGURED
	
	return OK

func _make_help_list() -> String:
	var result: String = ""
	
	for key: String in _help.keys() as Array[String]:
		result += "\t- {command}: {description}.\n".format({
			"command": key,
			"description": _help[key]
		})
	
	return result

func _get_help() -> String:
	var result: String = ""
	
	result += "Thanks for using Godocs! Here's a list of arguments you can use with this library.\n\n"
	result += _make_help_list()
	
	return result
