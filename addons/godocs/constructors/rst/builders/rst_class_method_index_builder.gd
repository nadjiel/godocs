## Creates a RST section with a table listing the methods of a class.
## 
## The [RSTClassMethodIndexBuilder] is capable of creating a [String] with
## a [b]section in Restructured Text[/b] syntax listing the methods
## of a class stored in a [ClassDocDB].[br]
## The format of the output generated by the
## [method RSTClassMethodIndexBuilder.build] method is as follows:
## [codeblock lang=rst]
## 
## Method index
## ============
## 
## .. table::
##    :widths: auto
## 
##    +-------------------------------+---------------------------------------------+
##    | :ref:`String <godocs_String>` | :ref:`method_a <godocs_Class_method_a>`\(\) |
##    +-------------------------------+---------------------------------------------+
##    | :ref:`bool <godocs_bool>`     | :ref:`method_b <godocs_Class_method_b>`\(\) |
##    +-------------------------------+---------------------------------------------+
## 
## [/codeblock]
## [i]See also: [RSTDocBuilder] and [ClassDocDB].[/i]
class_name RSTClassMethodIndexBuilder
extends RSTDocBuilder

## The [method build] method uses the information contained in a [ClassDocDB]
## passed via the [param db] parameter to build a [b]section[/b]
## for the documentation of the [b]class pointed by it[/b], with
## a table with information about that class' methods.[br]
## The format of the output of this method is described in the documentation
## of this class, the [RSTClassMethodIndexBuilder].
func build(db: ClassDocDB) -> String:
	var doc: XMLDocument = db.get_current_class_document()
	var class_node: XMLNode = doc.root
	
	var title := "Method index"
	var index: Array[Array] = make_member_matrix(
		"methods",
		_make_method_row,
		doc,
	)
	
	if index.is_empty():
		return ""
	
	var title_output: String = RSTSyntaxTranslator.make_heading(title, 2)
	var index_output: String = RSTSyntaxTranslator.make_table(
		index, [], { "widths": "auto" }
	)
	
	var result: String = "\n%s\n%s" % [
		title_output,
		index_output
	]
	
	return result

func _make_method_row(method_node: XMLNode, doc_name: String) -> Array[String]:
	var result: Array[String] = []
	
	var return_node: XMLNode = method_node.get_child_by_name("return")
	var param_nodes: Array[XMLNode] = method_node.get_children_by_name("param")
	
	var name: String = method_node.attributes.get("name", "")
	var is_static: bool = method_node.attributes.get("qualifiers", "")\
		.contains("static")
	var full_name: String = ".".join([ doc_name, name ])
	var return_type: String = return_node.attributes.get("type", "")
	
	var param_list: Array[Dictionary] = []
	
	for param_node: XMLNode in param_nodes:
		param_list.append(param_node.attributes)
	
	var return_type_output: String = RSTSyntaxTranslator\
		.make_code_member_type_ref(return_type)
	var signature_output: String = make_method_signature(
		full_name, "", param_list, is_static
	)
	
	result.append(return_type_output)
	result.append(signature_output)
	
	return result
