## Creates a RST section with subsections describing the properties of a class.
## 
## The [RSTClassPropertyDescriptionBuilder] is capable of creating a [String]
## with a [b]section in Restructured Text syntax[/b] listing and describing
## the properties of a class stored in a [ClassDocDB].[br]
## The format of the output generated by the
## [method RSTClassPropertyDescriptionBuilder.build] method is as follows:
## [codeblock lang=rst]
## 
## Property descriptions
## =====================
## 
## 
## .. _godocs_Class_property_a:
## 
## :ref:`String <godocs_String>` property_a = ``""``
## -------------------------------------------------
## 
## Description of the property_a.
## 
## 
## .. _godocs_Class_property_b:
## 
## :ref:`bool <godocs_bool>` property_b = ``true``
## -----------------------------------------------
## 
## Description of the property_b.
## 
## 
## [/codeblock]
## [i]See also: [RSTDocBuilder] and [ClassDocDB].[/i]
class_name RSTClassPropertyDescriptionBuilder
extends RSTDocBuilder

var _bbcode: SyntaxInterpreter = BBCodeSyntaxInterpreter.new()

var _rst: SyntaxTranslator = RSTSyntaxTranslator.new()

## The [method build] method uses the information contained in a [ClassDocDB]
## passed via the [param db] parameter to build a [b]section[/b]
## for the documentation of the [b]class pointed by it[/b], with
## a subsections describing that class' properties.[br]
## The format of the output of this method is described in the documentation
## of this class, the [RSTClassPropertyDescriptionBuilder].
func build(db: ClassDocDB) -> String:
	var doc: XMLDocument = db.get_current_class_document()
	var class_node: XMLNode = doc.root
	
	var title := "Property descriptions"
	
	var title_output: String = RSTSyntaxTranslator.make_heading(title, 2)
	var descriptions_output: String = _make_properties_descriptions(db)
	
	if descriptions_output.is_empty():
		return ""
	
	var result: String = "\n%s\n%s" % [
		title_output,
		descriptions_output
	]
	
	return result

func _make_property_description(
	member_node: XMLNode,
	db: ClassDocDB,
) -> String:
	var doc: XMLDocument = db.get_current_class_document()
	var doc_name: String = doc.root.attributes.get("name", "")
	var description: String = member_node.content
	
	if description == "":
		return ""
	
	var type: String = member_node.attributes.get("type", "")
	var is_static: bool = member_node.attributes.get("qualifiers", "")\
		.contains("static")
	var name: String = member_node.attributes.get("name", "")
	var full_name: String = ".".join([ doc_name, name ])
	var default_value: String = member_node.attributes.get("default", "")
	var signature: String = make_property_signature(
		full_name, type, default_value, is_static, false
	)
	
	var label_output := RSTSyntaxTranslator.make_code_member_label(full_name)
	var signature_output := RSTSyntaxTranslator.make_heading(signature, 3)
	var description_output: String = _bbcode\
		.interpret(description)\
		.translate(_rst)
	description_output = autocomplete_code_member_refs(description_output, db)
	
	var result: String = "\n%s\n\n%s\n%s\n\n" % [
		label_output,
		signature_output,
		description_output,
	]
	
	return result

func _make_properties_descriptions(db: ClassDocDB) -> String:
	var doc: XMLDocument = db.get_current_class_document()
	var members_node: XMLNode = doc.root.get_child_by_name("members")
	
	if members_node == null:
		return ""
	
	var result: String = ""
	
	for member_node: XMLNode in members_node.children:
		var description_output: String = _make_property_description(
			member_node, db
		)
		
		if description_output.is_empty():
			continue
		
		result += description_output
	
	return result
